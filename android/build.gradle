buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
}

ext {
    RELEASE_NUMBER = project.hasProperty('RELEASE_NUMBER') ? project.getProperty('RELEASE_NUMBER') : '0'
    VERSION_CODE = project.hasProperty('VERSION_CODE') ? project.getProperty('VERSION_CODE') : '0'
    RELEASE_TYPE = project.hasProperty('RELEASE_TYPE') ? project.getProperty('RELEASE_TYPE') : 'DEV'
    STABLE_BUILD = project.hasProperty('STABLE_BUILD') ? project.getProperty('STABLE_BUILD') : '0'
    appVersionCode = Integer.valueOf(VERSION_CODE ?: 1)
    appVersionName = RELEASE_NUMBER ?: "1.0"
}

task setupDependencies() { }

// def runBreakpadDumpSyms = { buildType ->
//     gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

//     def objDir = new File("${sharedDir}/build/intermediates/cmake/${buildType}/obj/arm64-v8a")
//     def stripDebugSymbol = "${sharedDir}/build/intermediates/transforms/stripDebugSymbol/${buildType}/0/lib/arm64-v8a/"
//     def outputDir = new File(breakpadDumpSymsDir, buildType)
//     if (!outputDir.exists()) {
//         outputDir.mkdirs()
//     }

//     objDir.eachFileRecurse (FileType.FILES) { file ->
//         if (file.name.endsWith('.so')) {
//             def output = file.name + ".sym"
//             def cmdArgs = [
//                     file.toString(),
//                     stripDebugSymbol
//             ]
//             def result = exec {
//                 workingDir HIFI_ANDROID_PRECOMPILED + '/breakpad/bin'
//                 commandLine './dump_syms'
//                 args cmdArgs
//                 ignoreExitValue true
//                 standardOutput = new BufferedOutputStream(new FileOutputStream(new File(outputDir, output)))
//             }
//         }
//     }
// }

// task runBreakpadDumpSymsDebug() {
//     doLast {
//         runBreakpadDumpSyms("debug");
//     }
// }

// task runBreakpadDumpSymsRelease() {
//     doLast {
//         runBreakpadDumpSyms("release");
//     }
// }

// task zipDumpSymsDebug(type: Zip, dependsOn: runBreakpadDumpSymsDebug) {
//     from (new File(breakpadDumpSymsDir, "debug").absolutePath)
//     archiveName "symbols-${RELEASE_NUMBER}-debug.zip"
//     destinationDir(new File("${appDir}/build/tmp/"))
// }

// task zipDumpSymsRelease(type: Zip, dependsOn: runBreakpadDumpSymsRelease) {
//     from (new File(breakpadDumpSymsDir, "release").absolutePath)
//     archiveName "symbols-${RELEASE_NUMBER}-release.zip"
//     destinationDir(new File("${appDir}/build/tmp/"))
// }

// task uploadBreakpadDumpSymsDebug(type:io.github.httpbuilderng.http.HttpTask, dependsOn: zipDumpSymsDebug) {
//     onlyIf {
//         System.getenv("CMAKE_BACKTRACE_URL") && System.getenv("CMAKE_BACKTRACE_SYMBOLS_TOKEN")
//     }
//     config {
//         request.uri = System.getenv("CMAKE_BACKTRACE_URL")
//     }
//     post {
//         request.uri.path = '/post'
//         request.uri.query = [format: 'symbols', token: System.getenv("CMAKE_BACKTRACE_SYMBOLS_TOKEN")]
//         request.body = new File("${appDir}/build/tmp/", "symbols-${RELEASE_NUMBER}-debug.zip").bytes
//         request.contentType = 'application/octet-stream'
//         response.success {
//             println ("${appDir}/build/tmp/symbols-${RELEASE_NUMBER}-debug.zip uploaded")
//         }
//     }
// }

// task uploadBreakpadDumpSymsRelease(type:io.github.httpbuilderng.http.HttpTask, dependsOn: zipDumpSymsRelease) {
//     onlyIf {
//         System.getenv("CMAKE_BACKTRACE_URL") && System.getenv("CMAKE_BACKTRACE_SYMBOLS_TOKEN")
//     }
//     config {
//         request.uri = System.getenv("CMAKE_BACKTRACE_URL")
//     }
//     post {
//         request.uri.path = '/post'
//         request.uri.query = [format: 'symbols', token: System.getenv("CMAKE_BACKTRACE_SYMBOLS_TOKEN")]
//         request.body = new File("${appDir}/build/tmp/", "symbols-${RELEASE_NUMBER}-release.zip").bytes
//         request.contentType = 'application/octet-stream'
//         response.success {
//             println ("${appDir}/build/tmp/symbols-${RELEASE_NUMBER}-release.zip uploaded")
//         }
//     }
// }

// task renameHifiACTaskDebug() {
//     doLast {
//         def sourceFile = new File("${appDir}/build/intermediates/cmake/debug/obj/arm64-v8a/","libhifiCodec.so")
//         def destinationFile = new File("${appDir}/src/main/jniLibs/arm64-v8a", "libplugins_libhifiCodec.so")
//         copy { from sourceFile;  into destinationFile.parent;  rename(sourceFile.name, destinationFile.name) }
//     }
// }
// task renameHifiACTaskRelease(type: Copy) {
//     doLast {
//         def sourceFile = new File("${appDir}/build/intermediates/cmake/release/obj/arm64-v8a/","libhifiCodec.so")
//         def destinationFile = new File("${appDir}/src/main/jniLibs/arm64-v8a", "libplugins_libhifiCodec.so")
//         copy { from sourceFile;  into destinationFile.parent;  rename(sourceFile.name, destinationFile.name) }
//     }
// }



// FIXME this code is prototyping the desired functionality for doing build time binary dependency resolution.
// See the comment on the qtBundle task above
/*
// FIXME derive the path from the gradle environment
def toolchain = [
    version: '4.9',
    prefix: 'aarch64-linux-android',
    // FIXME derive from the host OS
    ndkHost: 'windows-x86_64',
]

def findDependentLibrary = { String name ->
    def libFolders = [
        new File(qmlRoot, 'lib'),
        new File("${HIFI_ANDROID_PRECOMPILED}/tbb/lib/release"),
        new File("${HIFI_ANDROID_PRECOMPILED}/polyvox/lib/Release"),
        new File("${HIFI_ANDROID_PRECOMPILED}/polyvox/lib/"),
        new File("${HIFI_ANDROID_PRECOMPILED}/gvr/gvr-android-sdk-1.101.0/libraries"),
    ]

}

def readElfBinary = new File(android.ndkDirectory, "/toolchains/${toolchain.prefix}-${toolchain.version}/prebuilt/${toolchain.ndkHost}/bin/${toolchain.prefix}-readelf${EXEC_SUFFIX}")

def getDependencies = { File elfBinary ->
    Set<File> result = []
    Queue<File> pending = new LinkedList<>()
    pending.add(elfBinary)
    Set<File> scanned = []

    Pattern p = ~/.*\(NEEDED\).*Shared library: \[(.*\.so)\]/
    while (!pending.isEmpty()) {
        File current = pending.remove()
        if (scanned.contains(current)) {
            continue
        }
        scanned.add(current)
        def command = "${readElfBinary} -d -W ${current.absolutePath}"
        captureOutput(command).split('[\r\n]').each { line ->
            Matcher m = p.matcher(line)
            if (!m.matches()) {
                return
            }
            def libName = m.group(1)
            def file = new File(qmlRoot, "lib/${libName}")
            if (file.exists()) {
                result.add(file)
                pending.add(file)
            }
        }
    }
    return result
}

task testElf (dependsOn: 'externalNativeBuildDebug') {
    doLast {
        def appLibraries = new HashSet<File>()
        def qtDependencies = new HashSet<File>()
        externalNativeBuildDebug.nativeBuildConfigurationsJsons.each { File file ->
            def json = new JsonSlurper().parse(file)
            json.libraries.each { node ->
                def outputFile = new File(node.value.output)
                if (outputFile.canonicalPath.startsWith(projectDir.canonicalPath)) {
                    appLibraries.add(outputFile)
                }
            }
        }

        appLibraries.each { File file ->
            println getDependencies(file)
        }
    }
}
*/
